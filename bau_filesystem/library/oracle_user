#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: oracle_user
short_description: Manage users/schemas in an Oracle database
description:
    - Manage users/schemas in an Oracle database
    - Can be run locally on the controlmachine or on a remote host
version_added: "1.9.1"
options:
    hostname:
        description:
            - The Oracle database host
        required: false
        default: localhost
    port:
        description:
            - The listener port number on the host
        required: false
        default: 1521
    service_name:
        description:
            - The database service name to connect to
        required: true
    user:
        description:
            - The Oracle user name to connect to the database
        required: true
    password:
        description:
            - The Oracle user password for 'user'
        required: true
    mode:
        description:
            - The mode with which to connect to the database
        required: true
        default: normal
        choices: ['normal','sysdba']
    schema:
        description:
            - The schema that 
        required: false
        default: null
    schema_password:
        description:
            - The password for the new schema. i.e '..identified by password'
        required: false
        default: null
    schema_password_hash:
        description:
            - The password hash for the new schema. i.e '..identified by values 'XXXXXXX'
        required: false
        default: null
    default_tablespace:
        description:
            - The default tablespace for the new schema. The tablespace must exist
        required: false
        default: null
    grants:
        description:
            - The privileges granted to the new schema
        required: false
        default: null
notes:
    - cx_Oracle needs to be installed
requirements: [ "cx_Oracle" ]
author: Mikael SandstrÃ¶m, oravirt@gmail.com, @oravirt
'''

EXAMPLES = '''
# Create a new schema on a remote db by running the module on the controlmachine  (i.e: delegate_to: localhost)
oracle_user: hostname=remote-db-server service_name=orcl user=system password=manager schema=myschema schema_password=mypass default_tablespace=test state=present grants="'create session', create any table'" 

# Create a new schema on a remote db
oracle_user: hostname=localhost service_name=orcl user=system password=manager schema=myschema schema_password=mypass default_tablespace=test state=present grants=dba

# Drop a schema on a remote db
oracle_user: hostname=localhost service_name=orcl user=system password=manager schema=myschema state=absent


'''

try:
    import cx_Oracle
except ImportError:
    cx_oracle_exists = False
else:
    cx_oracle_exists = True


def clean_string(item):
    item = item.replace("'","").replace(", ",",").lstrip(" ").rstrip(",").replace("[","").replace("]","")

    return item

def clean_list(item):
    item = [p.replace("'","").replace(", ",",").lstrip(" ").rstrip(",").replace("[","").replace("]","") for p in item]

    return item

# Check if the user/schema exists
def check_user_exists(msg, cursor, schema):
    sql = 'select count(*) from dba_users where username = upper(\'%s\')' % schema
    
    try:
            cursor.execute(sql)
            result = cursor.fetchone()[0]
    except cx_Oracle.DatabaseError, exc:
            error, = exc.args
            msg[0] = error.message+ 'sql: ' + sql
            return False
            
    if result > 0:
        msg[0] = 'The schema (%s) already exists' % schema
        return True

# Create the user/schema
def create_user(msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, default_temp_tablespace, grants):
    grants_list=[]
    if not (schema):
        msg[0] = 'Error: Missing schema name'
        return False

    if not (schema_password):
        if not (schema_password_hash):
            msg[0] = 'Error: Missing schema password or password hash'
            return False
    
    
    if (schema_password_hash):
        sql = 'create user %s identified by values \'%s\' ' % (schema, schema_password_hash)

    else:
        sql = 'create user %s identified by %s '% (schema, schema_password)
    
    if (default_tablespace):
        sql += 'default tablespace %s '% default_tablespace
        sql += 'quota unlimited on %s '% default_tablespace

    if (default_temp_tablespace):
    	sql += 'temporary tablespace %s '% default_temp_tablespace
        
    
    try:
        cursor.execute(sql)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Blergh, something went wrong while creating the schema - %s sql: %s' % (error.message, sql)
        return False

    # Add grants to user if explicitly set. If not, only 'create session' is granted
    if (grants):
    	#grants=[p.replace("'","").replace(", ",",").lstrip(" ").rstrip(",").replace("[","").replace("]","") for p in grants]
    	grants=clean_list(grants)
    	for p in grants:
    		grants_list.append(p)
    	grants = ','.join(grants_list)

        sql = 'grant %s to %s '% (grants, schema)
    else:
        sql = 'grant create session to %s '% schema


    try:
        cursor.execute(sql)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Blergh, something went wrong while adding grants to the schema - %s sql: %s' % (error.message, sql)
        return False

    return True

# Get the current password hash for the user
def get_user_password_hash(module, msg, cursor, schema):
    sql = 'select password from sys.user$ where name = upper(\'%s\')' % schema
    try:
            cursor.execute(sql)
            pwhashresult = cursor.fetchone()[0]
    except cx_Oracle.DatabaseError, exc:
            error, = exc.args
            msg[0] = error.message+ ': sql: ' + sql
            module.fail_json(msg=msg[0])

    return pwhashresult

# Get the current defaults for the user
def get_user_current_defaults(module, msg, cursor, schema):
    
    curr_defaults = []
    sql = 'select lower(account_status),lower(default_tablespace),lower(temporary_tablespace) from dba_users where username = upper(\'%s\')' % schema
    try:
            cursor.execute(sql)
            defaults = cursor.fetchall()
    except cx_Oracle.DatabaseError, exc:
            error, = exc.args
            msg[0] = error.message+ ': sql: ' + sql
            module.fail_json(msg=msg[0])

    #module.exit_json(msg='defaults: %s' % (defaults), changed=False)    
    for account_status, default_tablespace, temporary_tablespace in defaults:
        curr_defaults.append(defaults)
    #module.exit_json(msg='defaults: %s' % (curr_defaults[0]), changed=False)    
    return curr_defaults[0]

# Modify the user/schema
def modify_user(module, msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, default_temp_tablespace, state):
    
    if (schema_password_hash):
        sql = 'alter user %s identified by values \'%s\'' % (schema, schema_password_hash)

    else:
        sql = 'alter user %s identified by %s  ' % (schema, schema_password)


    want_account_status = ''
    if state == 'present' or state == 'unlocked':
        want_account_status = 'open'
        sql += ' default tablespace %s temporary tablespace %s account unlock' % (default_tablespace, default_temp_tablespace)

    elif state == 'locked': 
        want_account_status = state
        sql += ' default tablespace %s temporary tablespace %s account lock' % (default_tablespace, default_temp_tablespace)
    
    wanted_list = []
    wanted_list.append((want_account_status, default_tablespace, default_temp_tablespace))

    old_pw_hash = get_user_password_hash(module, msg, cursor, schema)
    curr_defaults = get_user_current_defaults(module, msg, cursor, schema)

    
    if (schema_password_hash):
        if (wanted_list == curr_defaults) and (old_pw_hash == schema_password_hash):
            # Everything is kosher, exit changed=False
            module.exit_json(msg='The schema (%s) is in the intented state' % (schema), changed=False)    
        else:
            # Make the change and exit changed=True
            execute_sql(module, msg, cursor, sql)
            module.exit_json(msg='Successfully altered the user (%s), accstatus: %s, def tblsp: %s, def temptblsp: %s ' % (schema, want_account_status, default_tablespace, default_temp_tablespace), changed=True)
    else: 
        if (wanted_list == curr_defaults):
            # change everything and compare hash pre/post. If same => exit change=False else exit change=True
            execute_sql(module, msg, cursor, sql)
            new_pw_hash = get_user_password_hash(module, msg, cursor, schema)
            if new_pw_hash == old_pw_hash:
                module.exit_json(msg='The schema (%s) is in the intented state' % (schema), changed=False)
            else:
                module.exit_json(msg='Successfully altered the user (%s), accstatus: %s, def tblsp: %s, def temptblsp: %s ' % (schema, want_account_status, default_tablespace, default_temp_tablespace), changed=True)
        else:
            # do the complete change -> exit with change=True
            execute_sql(module, msg, cursor, sql)
            module.exit_json(msg='Successfully altered the user (%s), accstatus: %s, def tblsp: %s, def temptblsp: %s ' % (schema, want_account_status, default_tablespace, default_temp_tablespace), changed=True)





    return True

# Run the actual modification 
def execute_sql(module, msg, cursor, sql):

    try:
        cursor.execute(sql)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Blergh, something went wrong while altering the schema - %s sql: %s' % (error.message, sql)
        module.fail_json(msg=msg[0], changed=False)    
        return False

    return True

    
# Drop the user
def drop_user(module, msg, cursor, schema):
    black_list = ['sys','system','dbsnmp']
    if schema.lower() in black_list:

       msg[0] = 'Trying to drop an internal user: %s. Not allowed' % schema
       return False

    sql = 'drop user %s cascade' % schema

    try:
        cursor.execute(sql)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Blergh, something went wrong while dropping the schema - %s sql: %s' % (error.message, sql)
        return False

    return True


def main():

    msg = ['']
    module = AnsibleModule(
        argument_spec = dict(
            hostname      = dict(default='localhost'),
            port          = dict(default=1521),
            service_name  = dict(required=True),
            user          = dict(required=True),
            password      = dict(required=True),
            mode          = dict(default='normal', choices=["normal","sysdba"]),
            schema        = dict(default=None),
            schema_password  = dict(default=None),
            schema_password_hash  = dict(default=None),
            state         = dict(default="present", choices=["present", "absent", "locked", "unlocked"]),
            default_tablespace = dict(default=None),
            default_temp_tablespace = dict(default='temp'),
            grants         = dict(default=None, type="list")
            
        ),
        mutually_exclusive=[['schema_password', 'schema_password_hash']]
    )

    hostname = module.params["hostname"]
    port = module.params["port"]
    service_name = module.params["service_name"]
    user = module.params["user"]
    password = module.params["password"]
    mode = module.params["mode"]
    schema = module.params["schema"]
    schema_password = module.params["schema_password"]
    schema_password_hash = module.params["schema_password_hash"]
    state = module.params["state"]
    default_tablespace = module.params["default_tablespace"]
    default_temp_tablespace = module.params["default_temp_tablespace"]
    grants = module.params["grants"]

    if not cx_oracle_exists:
        module.fail_json(msg="The cx_Oracle module is required. 'pip install cx_Oracle' should do the trick. If cx_Oracle is installed, make sure ORACLE_HOME & LD_LIBRARY_PATH is set")

    dsn = cx_Oracle.makedsn(host=hostname, port=port, service_name=service_name)

    
    try:
        if mode == 'sysdba':
            conn = cx_Oracle.connect(user, password, dsn, mode=cx_Oracle.SYSDBA)
        else:
            conn = cx_Oracle.connect(user, password, dsn)
    
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Could not connect to database - %s ' % (error.message)
        module.fail_json(msg=msg[0], changed=False)

    cursor = conn.cursor()

    if state == 'present' or state == 'unlocked':
        if not check_user_exists(msg, cursor, schema):
            if create_user(msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, default_temp_tablespace, grants):
                msg[0] = 'The schema %s has been created successfully' % schema
                module.exit_json(msg=msg[0], changed=True)
            else:
                module.fail_json(msg=msg[0], changed=False)
        else:
            modify_user(module, msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, default_temp_tablespace, state)

    elif state == 'absent':
        if check_user_exists(msg, cursor, schema):
            if drop_user(module, msg, cursor, schema):
                msg[0] = 'The schema (%s) has been dropped successfully' % schema
                module.exit_json(msg=msg[0], changed=True)
        else:
            module.exit_json(msg='The schema (%s) doesn\'t exist' % schema, changed=False)                
    
    elif state == 'locked':
        if check_user_exists(msg, cursor, schema):
            if modify_user(module, msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, default_temp_tablespace, state):
                module.exit_json(msg=msg[0], changed=False)
            #else:
            #    module.exit_json(msg='The password for schema %s has been changed successfully'% schema, changed=True)
        module.exit_json(msg='The schema %s doesn\'t exist'% schema, changed=False)
                
    module.exit_json(msg=msg[0], changed=False)
    




from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
